What happens when you initialize a repository? Why do you need to do it?

An empty repository is created in the project folder.
After a repository is initialized, I can trace all changes of files added to the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area allows me to double check the files I am going to commit.

How can you use the staging area to make sure you have one commit per logical
change?

I can add only files related logically to the staging area and commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When we want to make some experimental changes. By deviating from the master branch, we still
keep the original repository intact so can go back to it any time.

How do the diagrams help you visualize the branch structure?

It shows all branches in the repository so I can understand the structure.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

A commit with one branch combined with other branch and it points two branches as parents.
We can see where current state(merged branch) came from and which branch is reachable from there.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
Automatic merging is convenient because it resolves merging conflicts as much as they can do.
However, you need to resolve conflicts manually if the merge is complicated. On the other hand,
always doing merges manually is time consuming if the merges are simple.
